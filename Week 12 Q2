#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

void knapsack(int capacity, int weights[], int values[], int n) {
    int dp[n + 1][capacity + 1];

    // Initialize the first row and column with 0
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
        }
    }

    // Fill the dp array
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (weights[i - 1] <= w)
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    int selected_items[n];
    int total_weight = capacity;
    int max_value = dp[n][capacity];
    int count = 0;

    // Trace back to find the selected items
    for (int i = n; i > 0 && max_value > 0; i--) {
        if (max_value != dp[i - 1][total_weight]) {
            selected_items[count++] = i;
            max_value -= values[i - 1];
            total_weight -= weights[i - 1];
        }
    }

    // Print the selected items
    printf("Selected items: ");
    for (int i = count - 1; i >= 0; i--) {
        printf("%d ", selected_items[i]);
    }
    printf("\n");

    printf("Maximum value: %d\n", dp[n][capacity]);
}

int main() {
    int n;
    printf("Enter the number of items: ");
    scanf("%d", &n);

    int weights[n];
    printf("Enter the weights of the items: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &weights[i]);
    }

    int values[n];
    printf("Enter the values of the items: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &values[i]);
    }

    int capacity;
    printf("Enter the knapsack capacity: ");
    scanf("%d", &capacity);

    knapsack(capacity, weights, values, n);

    return 0;
}
