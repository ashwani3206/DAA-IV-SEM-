#include <stdio.h>
#include <stdlib.h>

#define MAX 1000

typedef struct {
    int source;
    int destination;
    int weight;
} Edge;

typedef struct {
    int parent;
    int rank;
} Subset;

int find(Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

void unionSets(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int compare(const void* a, const void* b) {
    Edge* edge1 = (Edge*)a;
    Edge* edge2 = (Edge*)b;
    return edge1->weight - edge2->weight;
}

int maxBudget(int graph[MAX][MAX], int V) {
    Edge edges[MAX * MAX];

    int edgeCount = 0;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (graph[i][j] != 0) {
                edges[edgeCount].source = i;
                edges[edgeCount].destination = j;
                edges[edgeCount].weight = graph[i][j];
                edgeCount++;
            }
        }
    }

    qsort(edges, edgeCount, sizeof(Edge), compare);

    Subset subsets[MAX];
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    int maxBudget = 0;
    int edgeIndex = 0;
    int addedEdges = 0;

    while (addedEdges < V - 1) {
        Edge currentEdge = edges[edgeIndex++];

        int sourceParent = find(subsets, currentEdge.source);
        int destParent = find(subsets, currentEdge.destination);

        if (sourceParent != destParent) {
            maxBudget += currentEdge.weight;
            unionSets(subsets, sourceParent, destParent);
            addedEdges++;
        }
    }

    return maxBudget;
}

int main() {
    int V;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);

    int graph[MAX][MAX];

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int maxBudget = maxBudget(graph, V);
    printf("Maximum budget required: %d\n", maxBudget);

    return 0;
}
