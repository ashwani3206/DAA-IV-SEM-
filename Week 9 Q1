#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100

// Function to find the minimum of two numbers
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to perform the Floyd-Warshall algorithm
void floyd_warshall(int graph[MAX_VERTICES][MAX_VERTICES], int num_vertices) {
    int distance[MAX_VERTICES][MAX_VERTICES];
    int i, j, k;

    // Initialize the distance matrix with the graph values
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            distance[i][j] = graph[i][j];
        }
    }

    // Perform the Floyd-Warshall algorithm
    for (k = 0; k < num_vertices; k++) {
        for (i = 0; i < num_vertices; i++) {
            for (j = 0; j < num_vertices; j++) {
                if (distance[i][k] != INT_MAX && distance[k][j] != INT_MAX) {
                    distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j]);
                }
            }
        }
    }

    // Print the shortest distance matrix
    printf("Shortest Distance Matrix:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            if (distance[i][j] == INT_MAX) {
                printf("INF\t");
            } else {
                printf("%d\t", distance[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int num_vertices;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &num_vertices);

    int graph[MAX_VERTICES][MAX_VERTICES];
    int i, j;

    // Read the graph input
    printf("Enter the adjacency matrix of the graph:\n");
    for (i = 0; i < num_vertices; i++) {
        for (j = 0; j < num_vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Perform the Floyd-Warshall algorithm
    floyd_warshall(graph, num_vertices);

    return 0;
}
