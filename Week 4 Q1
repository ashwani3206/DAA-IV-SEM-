#include <stdio.h>

long long int merge(int arr[], int temp[], int left, int mid, int right) {
    int i = left, j = mid, k = left;
    long long int inv_count = 0;

    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }

    while (i <= mid - 1) {
        temp[k++] = arr[i++];
    }

    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }

    return inv_count;
}

long long int merge_sort(int arr[], int temp[], int left, int right) {
    long long int inv_count = 0;

    if (right > left) {
        int mid = (left + right) / 2;

        inv_count = merge_sort(arr, temp, left, mid);
        inv_count += merge_sort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }

    return inv_count;
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n, i;
        scanf("%d", &n);

        int arr[n], temp[n];

        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }

        long long int inv_count = merge_sort(arr, temp, 0, n - 1);

        printf("Sorted array: ");
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }

        printf("\nNumber of comparisons: %lld", (long long int) (3 * n * log2(n) / 2));
        printf("\nNumber of inversions: %lld\n", inv_count);
    }

    return 0;
}
