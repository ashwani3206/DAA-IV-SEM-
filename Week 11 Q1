#include <stdio.h>
#include <limits.h>

// Function to find the minimum number of operations to multiply the matrices
int matrixChainMultiplication(int dims[], int n) {
    int dp[n][n];

    // Initialize diagonal elements to 0
    for (int i = 1; i < n; i++) {
        dp[i][i] = 0;
    }

    // Compute minimum number of operations for each chain length
    for (int len = 2; len < n; len++) {
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;

            for (int k = i; k <= j - 1; k++) {
                int operations = dp[i][k] + dp[k + 1][j] + dims[i - 1] * dims[k] * dims[j];
                if (operations < dp[i][j]) {
                    dp[i][j] = operations;
                }
            }
        }
    }

    return dp[1][n - 1];
}

int main() {
    int n;
    printf("Enter the number of matrices: ");
    scanf("%d", &n);

    int dims[n + 1];
    printf("Enter the dimensions of the matrices:\n");
    for (int i = 0; i <= n; i++) {
        scanf("%d", &dims[i]);
    }

    int minOperations = matrixChainMultiplication(dims, n + 1);
    printf("Minimum number of operations: %d\n", minOperations);

    return 0;
}
