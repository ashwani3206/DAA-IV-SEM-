#include <stdio.h>
#include <limits.h>

#define MAX 1000

typedef struct {
    int source;
    int destination;
    int weight;
} Edge;

void printPath(int path[], int v, int source) {
    if (v == source) {
        printf("%d ", source);
        return;
    }

    printPath(path, path[v], source);
    printf("%d ", v);
}

void bellmanFord(int graph[MAX][MAX], int V, int source) {
    int distance[MAX];
    int path[MAX];

    for (int i = 0; i < V; i++) {
        distance[i] = INT_MAX;
        path[i] = -1;
    }

    distance[source] = 0;

    // Relaxation step
    for (int i = 0; i < V - 1; i++) {
        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0) {
                    if (distance[v] > distance[u] + graph[u][v]) {
                        distance[v] = distance[u] + graph[u][v];
                        path[v] = u;
                    }
                }
            }
        }
    }

    // Check for negative cycles
    for (int u = 0; u < V; u++) {
        for (int v = 0; v < V; v++) {
            if (graph[u][v] != 0) {
                if (distance[v] > distance[u] + graph[u][v]) {
                    printf("Negative cycle detected. No solution.\n");
                    return;
                }
            }
        }
    }

    // Print paths and distances
    for (int i = 0; i < V; i++) {
        if (i != source) {
            printf("Path from %d to %d: ", i, source);
            printPath(path, i, source);
            printf("Distance: %d\n", distance[i]);
        }
    }
}

int main() {
    int V;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);

    int graph[MAX][MAX];

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int source;
    printf("Enter the source vertex: ");
    scanf("%d", &source);

    bellmanFord(graph, V, source);

    return 0;
}
