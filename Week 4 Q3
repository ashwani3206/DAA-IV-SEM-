#include <stdio.h>

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

// Function to find kth smallest element
int kthSmallest(int arr[], int low, int high, int k) {
    if (k > 0 && k <= high - low + 1) {
        int pos = partition(arr, low, high);
        if (pos - low == k - 1) {
            return arr[pos];
        }
        else if (pos - low > k - 1) {
            return kthSmallest(arr, low, pos - 1, k);
        }
        else {
            return kthSmallest(arr, pos + 1, high, k - pos + low - 1);
        }
    }
    return -1; // Kth smallest element not present
}

// Function to find kth largest element
int kthLargest(int arr[], int low, int high, int k) {
    if (k > 0 && k <= high - low + 1) {
        int pos = partition(arr, low, high);
        if (pos - low == high - k) {
            return arr[pos];
        }
        else if (pos - low > high - k) {
            return kthLargest(arr, low, pos - 1, k);
        }
        else {
            return kthLargest(arr, pos + 1, high, k);
        }
    }
    return -1; // Kth largest element not present
}

// Driver code
int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int n, k;
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        scanf("%d", &k);

        // Find kth smallest element
        int kthSmallestElement = kthSmallest(arr, 0, n - 1, k);
        if (kthSmallestElement != -1) {
            printf("%d\n", kthSmallestElement);
        }
        else {
            printf("not present\n");
        }

        // Find kth largest element
        int kthLargestElement = kthLargest(arr, 0, n - 1, k);
        if (kthLargestElement != -1) {
            printf("%d\n", kthLargestElement);
        }
        else {
            printf("not present\n");
        }
    }
    return 0;
}
